{"ast":null,"code":"var _jsxFileName = \"/home/biodun/My_projects/js/food-ordering-landing-page/src/components/store/CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from \"react\";\nimport CartContext from \"./cartcontext\"; //Created a default state for the cart to be used in the reducer function and the reducer hook defalt state;\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n}; //END\n//The Reducer function loic\n\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD\") {\n    //Finding the accurate Total Amount\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount; //END\n    //Checking if an item already exists in the Cart, if yes findng it's index , if no , giving it a value of null\n\n    const existingItemIndex = state.items.findIndex(item => item.id === action.item.id); //END\n    //Assigning the existing item variable to the existing variale in the cart, if there is no existing variabe, it's vaue will be null or false like said above\n\n    const existingItem = state.items[existingItemIndex]; //END\n\n    let updatedItems; //Checking If is is true or false that the item already exists in the cart\n\n    if (existingItem) {\n      //assigns  the exsiting item and adds the amount inputted to the amount of the existing item to the updatedItem variale\n      const updatedItem = { ...existingItem,\n        amount: existingItem.amount + action.item.amount\n      }; //END\n      //Get all the items in the cart and assigns the updatedItem varibale to the Existing item\n\n      updatedItems = [...state.items];\n      updatedItems[existingItemIndex] = updatedItem; //END\n    } else {\n      //Adding the item into the cart if it doesn't exist before before\n      updatedItems = state.items.concat(action.item); //END\n    }\n\n    return {\n      //Returning the items data and totalAmount\n      items: updatedItems,\n      totalAmount: updatedTotalAmount //END\n\n    };\n  } //END\n\n\n  if (action.type === \"REMOVE\") {\n    //Checking if an item already exists in the Cart, if yes findng it's index , if no , giving it a value of null\n    const existingItemIndex = state.items.findIndex(item => item.id === action.id); //END\n    //Assigning the existing item variable to the existingItem variable\n\n    const existingItem = state.items[existingItemIndex]; //END\n    //Finding the accurate Total Amount\n\n    const updatedTotalAmount = state.totalAmount - existingItem.price; //END\n\n    let updatedItems; //Checking if the amount is equals to 1\n\n    if (existingItem.amount === 1) {\n      updatedItems = state.items.filter(item => item.id !== action.id);\n    } //END\n    else {\n      //Get all the items in the cart, decrements the item amount and assigns them to the updatedItem\n      const updatedItem = { ...existingItem,\n        amount: existingItem.amount - 1\n      }; //END\n      //Get all the items in the cart and assigns the updatedItem varibale to the Existing item\n\n      updatedItems = [...state.items];\n      updatedItems[existingItemIndex] = updatedItem; //END\n    }\n\n    return {\n      //Returning the items data and totalAmount\n      items: updatedItems,\n      totalAmount: updatedTotalAmount //END\n\n    };\n  } //Returns the default cart state if no condition is met\n\n\n  return defaultCartState; //END\n};\n\nconst CartProvider = props => {\n  _s();\n\n  //Using the useReducr hook\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState); //END\n  //dispatching the cart ADD action\n\n  const addItemHandler = item => {\n    dispatchCartAction({\n      type: \"ADD\",\n      item: item\n    });\n  }; //dispatching the cart REMOVE action\n\n\n  const removeItemHandler = id => {\n    dispatchCartAction({\n      type: \"REMOVE\",\n      id: id\n    });\n  }; //Defining and Automating the cartContext Functions\n\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemHandler,\n    removeItem: removeItemHandler\n  }; //Rendering every content being rendered by the use CartContext, using the .Provider to let the context be able to manage other parts of the application\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedTotalAmount","item","price","amount","existingItemIndex","findIndex","id","existingItem","updatedItems","updatedItem","concat","filter","CartProvider","props","cartState","dispatchCartAction","addItemHandler","removeItemHandler","cartContext","addItem","removeItem","children"],"sources":["/home/biodun/My_projects/js/food-ordering-landing-page/src/components/store/CartProvider.js"],"sourcesContent":["import React, { useReducer } from \"react\";\nimport CartContext from \"./cartcontext\";\n\n//Created a default state for the cart to be used in the reducer function and the reducer hook defalt state;\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0,\n};\n//END\n\n//The Reducer function loic\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD\") {\n    //Finding the accurate Total Amount\n    const updatedTotalAmount =\n      state.totalAmount + action.item.price * action.item.amount;\n    //END\n\n    //Checking if an item already exists in the Cart, if yes findng it's index , if no , giving it a value of null\n    const existingItemIndex = state.items.findIndex(\n      (item) => item.id === action.item.id\n    );\n    //END\n\n    //Assigning the existing item variable to the existing variale in the cart, if there is no existing variabe, it's vaue will be null or false like said above\n    const existingItem = state.items[existingItemIndex];\n    //END\n    let updatedItems;\n\n    //Checking If is is true or false that the item already exists in the cart\n    if (existingItem) {\n      //assigns  the exsiting item and adds the amount inputted to the amount of the existing item to the updatedItem variale\n      const updatedItem = {\n        ...existingItem,\n        amount: existingItem.amount + action.item.amount,\n      };\n      //END\n\n      //Get all the items in the cart and assigns the updatedItem varibale to the Existing item\n      updatedItems = [...state.items];\n      updatedItems[existingItemIndex] = updatedItem;\n      //END\n    } else {\n      //Adding the item into the cart if it doesn't exist before before\n      updatedItems = state.items.concat(action.item);\n      //END\n    }\n    return {\n      //Returning the items data and totalAmount\n      items: updatedItems,\n      totalAmount: updatedTotalAmount,\n      //END\n    };\n  }\n  //END\n\n  if (action.type === \"REMOVE\") {\n    //Checking if an item already exists in the Cart, if yes findng it's index , if no , giving it a value of null\n    const existingItemIndex = state.items.findIndex(\n      (item) => item.id === action.id\n    );\n    //END\n\n    //Assigning the existing item variable to the existingItem variable\n    const existingItem = state.items[existingItemIndex];\n    //END\n\n    //Finding the accurate Total Amount\n    const updatedTotalAmount = state.totalAmount - existingItem.price;\n    //END\n    let updatedItems;\n\n    //Checking if the amount is equals to 1\n    if (existingItem.amount === 1) {\n      updatedItems = state.items.filter((item) => item.id !== action.id);\n    }\n    //END\n    else {\n      //Get all the items in the cart, decrements the item amount and assigns them to the updatedItem\n      const updatedItem = { ...existingItem, amount: existingItem.amount - 1 };\n      //END\n\n      //Get all the items in the cart and assigns the updatedItem varibale to the Existing item\n      updatedItems = [...state.items];\n      updatedItems[existingItemIndex] = updatedItem;\n      //END\n    }\n    return {\n      //Returning the items data and totalAmount\n      items: updatedItems,\n      totalAmount: updatedTotalAmount,\n      //END\n    };\n  }\n  //Returns the default cart state if no condition is met\n  return defaultCartState;\n  //END\n};\n\nconst CartProvider = (props) => {\n  //Using the useReducr hook\n  const [cartState, dispatchCartAction] = useReducer(\n    cartReducer,\n    defaultCartState\n  );\n  //END\n\n  //dispatching the cart ADD action\n  const addItemHandler = (item) => {\n    dispatchCartAction({\n      type: \"ADD\",\n      item: item,\n    });\n  };\n\n  //dispatching the cart REMOVE action\n  const removeItemHandler = (id) => {\n    dispatchCartAction({\n      type: \"REMOVE\",\n      id: id,\n    });\n  };\n\n  //Defining and Automating the cartContext Functions\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemHandler,\n    removeItem: removeItemHandler,\n  };\n\n  //Rendering every content being rendered by the use CartContext, using the .Provider to let the context be able to manage other parts of the application\n  return (\n    <CartContext.Provider value={cartContext}>\n      {props.children}\n    </CartContext.Provider>\n  );\n};\n\nexport default CartProvider;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}